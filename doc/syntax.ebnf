program = { directive } , { decl } ;

directive = use_directive ;

use_directive = "use" , [ id , { ',' , id } ] ;

decl = mod_decl
  | struct_decl
  | union_decl
  | enum_decl
  | fun_decl
  | gen_decl
  | var_decl ;

mod_decl = "mod" , id , '{' , { decl } , '}' ;

struct_decl = "struct" , [ generic_param_list ] , id , '{' , { member } , '}' ;

union_decl = "union" , id , '{' , { member } , '}' ;

member = var_decl ;

enum_decl = "enum" , id , '{' , { enumerator } , '}' ;

enumerator = id ;

fun_decl = "fun" , [ generic_param_list ] , id , '(' , [ param_list ] , [ default_param_list | variadic_param ] , ')' , ':' , type , stmt ;

gen_decl = "gen" , [ generic_param_list ] , id , '(' , [ param_list ] , [ default_param_list | variadic_param ] , ')' , ':' , type , stmt ;

generic_param_list = '<' , generic_param , { ',' , generic_param } , '>' ;

generic_param = id , ':' , ( type | "type" ) ;

param_list = param , { ',' , param } ;

param = id , ':' , type ;

default_param_list = default_param , { ',' , default_param } ;

default_param = id , ':' , type , '=' , expr ;

variadic_param = id , ':' , type , "..." ;

var_decl = id , ':' , type , [ '=' , expr ] ;

type = primitive_type
  | id
  | '*' , type
  | '[]' , type
  | '[' , expr , ']' , type
  | '&' , type
  | '?' , type
  | "mut" , type
  | "const" , type
  | "fun" , '(' , [ type , { ',' , type } ] , ')' , ':' , type
  | "gen" , '(' , [ type , { ',' , type } ] , ')' , ':' , type
  | type , '.' , id
  | type , '<' , ( type | expr ) , { ',' , ( type | expr ) } , '>' ;

primitive_type = "unit"
  | "bool"
  | "u8"
  | "u16"
  | "u32"
  | "u64"
  | "usize"
  | "i8"
  | "i16"
  | "i32"
  | "i64"
  | "isize" ;

stmt = expr
  | var_decl
  | if_stmt
  | for_stmt
  | while_stmt
  | break_stmt
  | continue_stmt
  | return_stmt
  | yield_stmt
  | defer_stmt
  | block_stmt ;

if_stmt = "if" , expr , "then" , stmt
  | "if" , expr , "then" , stmt , "else" , stmt ;

for_stmt = "for" , loop_var , "in" , expr , "do" , stmt ;

loop_var = id , ':' , type ;

while_stmt = "while" , expr , "do" , stmt ;

break_stmt = "break" ;

continue_stmt = "continue" ;

return_stmt = "return"
  | "return" , expr ;

yield_stmt = "yield"
  | "yield" , expr ;

defer_stmt = "defer" , stmt ;

block_stmt = '{' , stmt_list , '}' ;

stmt_list = stmt_list , stmt
  | empty ;

expr = bin_expr
  | un_expr
  | group_expr
  | term ;

bin_expr = expr , bin_op , expr ;

bin_op = ','
  | '+'
  | '-'
  | '*'
  | '/'
  | '%'
  | '&'
  | '|'
  | '^'
  | "<<"
  | ">>"
  | "&&"
  | "||"
  | "=="
  | "!="
  | '<'
  | '>'
  | "<="
  | ">="
  | '='
  | "+="
  | "-="
  | "*="
  | "/="
  | "%="
  | "&="
  | "|="
  | "^="
  | "<<="
  | ">>="
  | '.'
  | ".."
  | "*."
  | "?." ;

un_expr = prefix_op , expr
  | expr , postfix_op ;

prefix_op = '+'
  | '-'
  | "++"
  | "--"
  | '~'
  | '!'
  | '*'
  | '&'
  | "sizeof"
  | "alignof"
  | "typeof" ;

postfix_op = "is" , type 
  | "as" , type
  | "++"
  | "--"
  | '[' , expr , ']'
  | '(' , [ expr , { ',' , expr } ] , ')'
  | '<' , ( expr | type ) , { ',' , ( expr | type ) }  , '>' ;

group_expr = '(' , expr , ')' ;

term = id
  | literal ;

literal = int_literal
  | flt_literal
  | str_literal
  | char_literal
  | bool_literal
  | null_literal ;

int_literal = dec_int_literal
  | hex_int_literal
  | oct_int_literal
  | bin_int_literal ;

dec_int_literal = dec_digit , { dec_digit } ;

hex_int_literal = '0' , ( 'x' | 'X' ) , hex_digit , { hex_digit } ;

oct_int_literal = '0' , ( 'o' | 'O' ) , oct_digit , { oct_digit } ;

bin_int_literal = '0' , ( 'b' , 'B' ) , bin_digit , { bin_digit } ;

flt_literal = dec_digit , { dec_digit } , '.' , dec_digit , { dec_digit } ;

str_literal = '"' , { character } , '"' ;

char_literal = '\'' , character , '\'' ;

bool_literal = "true"
  | "false" ;

null_literal = "null" ;

dec_digit = '0'
  | '1'
  | '2'
  | '3'
  | '4'
  | '5'
  | '6'
  | '7'
  | '8'
  | '9' ;

hex_digit = dec_digit
  | 'a'
  | 'b'
  | 'c'
  | 'd'
  | 'e'
  | 'f'
  | 'A'
  | 'B'
  | 'C'
  | 'D'
  | 'E'
  | 'F' ;

oct_digit = '0'
  | '1'
  | '2'
  | '3'
  | '4'
  | '5'
  | '6'
  | '7' ;

bin_digit = '0'
  | '1' ;

character = ? all ascii characters ? ;
